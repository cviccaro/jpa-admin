{"version":3,"sources":["shared/components/tooltip/provider.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAQO,eAAe,CAAC,CAAA;AACvB,mBAAqC,SAAS,CAAC,CAAA;AAE/C,2BAA4B,cAAc,CAAC,CAAA;AAC3C,0BAAiC,aAAa,CAAC,CAAA;AAG/C;IAKC,oBAAoB,GAAsB;QAAtB,QAAG,GAAH,GAAG,CAAmB;IAAI,CAAC;IAE/C,sCAAiB,GAAjB,UAAkB,SAA2B;QAC5C,IAAI,CAAC,aAAa,GAAG,SAAS,CAAC;IAChC,CAAC;IAED,yBAAI,GAAJ,UAAK,EAAc,EAAE,IAAY,EAAE,KAAa;QAAhD,iBAwBC;QAvBA,MAAM,CAAC,eAAU,CAAC,MAAM,CAAC,UAAC,QAAuB;YAEhD,KAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,4BAAgB,CAAC,CAAC,IAAI,CAAC,UAAC,UAA8C;gBAE/F,IAAI,SAAS,GAAG,yBAAkB,CAAC,OAAO,CAAC;oBAC1C,EAAE,OAAO,EAAE,wBAAW,EAAE,QAAQ,EAAE,IAAI,wBAAW,CAAC,EAAE,EAAE,IAAI,EAAE,KAAK,CAAC,EAAE;iBACpE,CAAC,CAAC;gBACH,IAAI,QAAQ,GAAG,yBAAkB,CAAC,qBAAqB,CAAC,SAAS,EAAE,KAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC;gBAGtG,MAAM,CAAC,KAAI,CAAC,aAAa,CAAC,eAAe,CAAC,UAAU,EAAE,KAAI,CAAC,aAAa,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;YAC5F,CAAC,CAAC,CAAC,IAAI,CAAC,UAAC,MAAsC;gBAE9C,KAAI,CAAC,WAAW,GAAG,MAAM,CAAC;gBAG1B,KAAI,CAAC,aAAa,CAAC,OAAO,CAAC,aAAa,CAAC,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;gBAGpF,QAAQ,CAAC,IAAI,CAAC,KAAI,CAAC,WAAW,CAAC,CAAC;gBAChC,QAAQ,CAAC,QAAQ,EAAE,CAAC;YACrB,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;IACJ,CAAC;IAED,0BAAK,GAAL;QACC,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC;YAAC,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;IAClD,CAAC;IAxCF;QAAC,iBAAU,EAAE;;kBAAA;IAyCb,iBAAC;AAAD,CAxCA,AAwCC,IAAA;AAxCY,kBAAU,aAwCtB,CAAA","file":"shared/components/tooltip/provider.js","sourcesContent":["import { \n\tComponentRef,\n\tComponentResolver,\n\tComponentFactory,\n\tElementRef,\n\tInjectable,\n\tReflectiveInjector,\n\tViewContainerRef\n} from '@angular/core';\nimport { Observable, Observer } from 'rxjs/Rx';\n\nimport { TooltipData } from './interfaces';\nimport { TooltipComponent } from './component';\n\n@Injectable()\nexport class JpaTooltip {\n\tviewContainer: ViewContainerRef;\n\n\tprivate _toolTipCmp: ComponentRef<TooltipComponent>;\n\n\tconstructor(private _cr: ComponentResolver) { }\n\n\tregisterContainer(container: ViewContainerRef) {\n\t\tthis.viewContainer = container;\n\t}\n\n\topen(el: ElementRef, text: string, align: string) {\n\t\treturn Observable.create((observer: Observer<any>) => {\n\t\t\t// Resolve the TooltipComponent, and build it\n\t\t\tthis._cr.resolveComponent(TooltipComponent).then((cmpFactory: ComponentFactory<TooltipComponent>) => {\n\t\t\t\t// Create reflective injector to provide an instance of TooltipData \n\t\t\t\tlet providers = ReflectiveInjector.resolve([\n\t\t\t\t\t{ provide: TooltipData, useValue: new TooltipData(el, text, align) },\n\t\t\t\t]);\n\t\t\t\tlet injector = ReflectiveInjector.fromResolvedProviders(providers, this.viewContainer.parentInjector);\n\n\t\t\t\t// Create the component, outputs a promise...\n\t\t\t\treturn this.viewContainer.createComponent(cmpFactory, this.viewContainer.length, injector);\n\t\t\t}).then((cmpRef: ComponentRef<TooltipComponent>) => {\n\t\t\t\t// Store reference to TooltipComponent\n\t\t\t\tthis._toolTipCmp = cmpRef;\n\n\t\t\t\t// Append it to DOM\n\t\t\t\tthis.viewContainer.element.nativeElement.appendChild(cmpRef.location.nativeElement);\n\n\t\t\t\t// Resolve the component\n\t\t\t\tobserver.next(this._toolTipCmp);\n\t\t\t\tobserver.complete();\n\t\t\t});\n\t\t});\n\t}\n\n\tclose() {\n\t\tif (this._toolTipCmp) this._toolTipCmp.destroy();\n\t}\n}\n"],"sourceRoot":"/source/"}