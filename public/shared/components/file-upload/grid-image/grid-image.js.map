{"version":3,"sources":["shared/components/file-upload/grid-image/grid-image.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA+G,eAAe,CAAC,CAAA;AAC/H,qBAAuB,yBAAyB,CAAC,CAAA;AAajD;IAAA;QACW,aAAQ,GAAG,KAAK,CAAC;QAQd,kBAAa,GAAG,IAAI,mBAAY,EAAE,CAAC;QACnC,gBAAW,GAAG,IAAI,mBAAY,EAAE,CAAC;IAkC/C,CAAC;IA/BG,gCAAY,GAAZ,UAAa,CAAC;QACV,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;IACzB,CAAC;IAED,gCAAY,GAAZ,UAAa,CAAC;QACV,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;IAC1B,CAAC;IAED,0BAAM,GAAN;QACI,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,WAAW,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;IAC7E,CAAC;IAMD,4BAAQ,GAAR;QAAA,iBAMC;QALG,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC;QAEvD,IAAI,CAAC,SAAS,GAAsB,IAAI,CAAC,QAAQ,CAAC,aAAc,CAAC,gBAAgB,CAAC,MAAM,EAAE,UAAA,CAAC;YACvF,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,EAAC,KAAK,EAAE,CAAC,EAAE,MAAM,EAAE,KAAI,CAAC,WAAW,EAAC,CAAC,CAAC;QAChE,CAAC,CAAC,CAAC;IACP,CAAC;IAMD,+BAAW,GAAX;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC;YAAoB,IAAI,CAAC,QAAQ,CAAC,aAAc,CAAC,mBAAmB,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;IACpH,CAAC;IAvCD;QAAC,gBAAS,CAAC,OAAO,CAAC;;+CAAA;IAEnB;QAAC,YAAK,EAAE;;kDAAA;IACR;QAAC,YAAK,EAAE;;4CAAA;IAER;QAAC,aAAM,EAAE;;oDAAA;IACT;QAAC,aAAM,EAAE;;kDAAA;IAET;QAAC,mBAAY,CAAC,YAAY,CAAC;;;;iDAAA;IAI3B;QAAC,mBAAY,CAAC,YAAY,CAAC;;;;iDAAA;IAzB/B;QAAC,gBAAS,CAAC;YACP,QAAQ,EAAE,MAAM,CAAC,EAAE;YACnB,QAAQ,EAAE,gBAAgB;YAC1B,WAAW,EAAE,mBAAmB;YAChC,SAAS,EAAE,CAAC,kBAAkB,CAAC;YAC/B,UAAU,EAAE;gBACR,aAAM;aACT;SACJ,CAAC;;iBAAA;IA6CF,gBAAC;AAAD,CA5CA,AA4CC,IAAA;AA5CY,iBAAS,YA4CrB,CAAA","file":"shared/components/file-upload/grid-image/grid-image.js","sourcesContent":["import { Component, Input, Output, ViewChild, ElementRef, EventEmitter, HostListener, OnInit, OnDestroy } from '@angular/core';\nimport { MdIcon } from '@angular2-material/icon';\n\nimport { JpFile } from '../../../index';\n\n@Component({\n    moduleId: module.id,\n    selector: 'jpa-grid-image',\n    templateUrl: './grid-image.html',\n    styleUrls: ['./grid-image.css'],\n    directives: [\n        MdIcon\n    ]\n})\nexport class GridImage implements OnInit, OnDestroy {\n    public hovering = false;\n    private _listener: any;\n\n    @ViewChild('image') public _imageEl: ElementRef;\n\n    @Input() imageConfig: JpFile;\n    @Input() index: number;\n\n    @Output() clickedRemove = new EventEmitter();\n    @Output() imageLoaded = new EventEmitter();\n\n    @HostListener('mouseenter')\n    onMouseEnter(e) {\n        this.hovering = true;\n    }\n    @HostListener('mouseleave')\n    onMouseLeave(e) {\n        this.hovering = false;\n    }\n\n    remove() {\n        this.clickedRemove.emit({ config: this.imageConfig, index: this.index });\n    }\n\n    /**\n     * Initialize the directive/component after Angular initializes \n     * the data-bound input properties.\n     */\n    ngOnInit() {\n        this._imageEl.nativeElement.src = this.imageConfig.url;\n\n        this._listener = (<HTMLImageElement>this._imageEl.nativeElement).addEventListener('load', e => {\n            this.imageLoaded.emit({event: e, config: this.imageConfig});\n        });\n    }\n\n    /**\n     * Cleanup just before Angular destroys the directive/component. Unsubscribe \n     * observables and detach event handlers to avoid memory leaks.\n     */\n    ngOnDestroy() {\n        if (this._listener) (<HTMLImageElement>this._imageEl.nativeElement).removeEventListener('load', this._listener);\n    }\n}\n"],"sourceRoot":"/source/"}