{"version":3,"sources":["shared/components/file-upload/grid-image/grid-image.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA2G,eAAe,CAAC,CAAA;AAE3H,qBAAqB,yBAAyB,CAAC,CAAA;AAW/C;IAAA;QACW,aAAQ,GAAG,KAAK,CAAC;QASd,iBAAY,GAAG,IAAI,mBAAY,EAAE,CAAC;QAoBlC,gBAAW,GAAG,IAAI,mBAAY,EAAE,CAAC;IAsC/C,CAAC;IA9CG,gCAAY,GAAZ,UAAa,CAAC;QACV,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;IACzB,CAAC;IAED,gCAAY,GAAZ,UAAa,CAAC;QACV,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;IAC1B,CAAC;IAMD,4BAAQ,GAAR;QAAA,iBAKC;QAJsB,IAAI,CAAC,QAAQ,CAAC,aAAc,CAAC,gBAAgB,CAAC,MAAM,EAAE,UAAA,CAAC;YACtE,OAAO,CAAC,GAAG,CAAC,mBAAmB,EAAE,KAAI,CAAC,CAAC;YACvC,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,EAAC,KAAK,EAAE,CAAC,EAAE,MAAM,EAAE,KAAI,CAAC,WAAW,EAAC,CAAC,CAAC;QAChE,CAAC,CAAC,CAAC;IACP,CAAC;IAED,0BAAM,GAAN;QACI,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,WAAW,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;IAC5E,CAAC;IAjCD;QAAC,aAAM,EAAE;;mDAAA;IAET;QAAC,YAAK,EAAE;;kDAAA;IAOR;QAAC,YAAK,EAAE;;4CAAA;IAER;QAAC,mBAAY,CAAC,YAAY,EAAE,CAAC,eAAe,CAAC,CAAC;;;;iDAAA;IAI9C;QAAC,mBAAY,CAAC,YAAY,EAAE,CAAC,eAAe,CAAC,CAAC;;;;iDAAA;IAK9C;QAAC,aAAM,EAAE;;kDAAA;IAET;QAAC,gBAAS,CAAC,OAAO,CAAC;;+CAAA;IAzCvB;QAAC,gBAAS,CAAC;YACP,QAAQ,EAAE,MAAM,CAAC,EAAE;YACnB,QAAQ,EAAE,gBAAgB;YAC1B,WAAW,EAAE,mBAAmB;YAChC,SAAS,EAAE,CAAC,kBAAkB,CAAC;YAC/B,UAAU,EAAE;gBACR,aAAM;aACT;SACJ,CAAC;;iBAAA;IAqEF,gBAAC;AAAD,CApEA,AAoEC,IAAA;AApEY,iBAAS,YAoErB,CAAA","file":"shared/components/file-upload/grid-image/grid-image.js","sourcesContent":["import { Component, Input, Output, AfterViewInit, ViewChild, ElementRef, EventEmitter, HostListener } from '@angular/core';\n\nimport {MdIcon} from '@angular2-material/icon';\n\n@Component({\n    moduleId: module.id,\n    selector: 'jpa-grid-image',\n    templateUrl: './grid-image.html',\n    styleUrls: ['./grid-image.css'],\n    directives: [\n        MdIcon\n    ]\n})\nexport class GridImage {\n    public hovering = false;\n\n    // @Input() progress: any;\n    // @Input() imageId: any;\n    // @Input() src: any;\n    // @Input() imageData: any;\n    // @Input() alt: any;\n    // @Input() title: any;\n    // \n    @Output() imageRemoved = new EventEmitter();\n\n    @Input() imageConfig: {\n        id?: any,\n        isNew?: boolean,\n        alt?: string,\n        title?: string,\n        image_url: string\n    }\n    @Input() index: number;\n\n    @HostListener('mouseenter', ['$event.target'])\n    onMouseEnter(e) {\n        this.hovering = true;\n    }\n    @HostListener('mouseleave', ['$event.target'])\n    onMouseLeave(e) {\n        this.hovering = false;\n    }\n\n    @Output() imageLoaded = new EventEmitter();\n\n    @ViewChild('image') public _imageEl: ElementRef;\n\n    ngOnInit() {\n        (<HTMLImageElement>this._imageEl.nativeElement).addEventListener('load', e => {\n            console.log('GridImage Loaded.', this);\n            this.imageLoaded.emit({event: e, config: this.imageConfig});\n        });\n    }\n\n    remove() {\n        this.imageRemoved.emit({ config: this.imageConfig, index: this.index });\n    }\n    // ngAfterViewInit() {\n    //     console.info('GridImage# AfterViewInit', this);\n\n    //     let xhr = new XMLHttpRequest();\n\n    //     xhr.addEventListener('progress', e => {\n    //         let pct = e.loaded / e.total;\n\n    //         console.log(`Progress!! Loaded: ${e.loaded} Total: ${e.total} Pct: ${pct}`);\n    //     });\n    //     xhr.addEventListener('load', e => {\n    //         console.log('Load!', e);\n    //     });\n    //     xhr.addEventListener('abort', e => {\n    //         console.warn('ImageAbort!', e);\n    //     });\n    //     xhr.addEventListener('error', e => {\n    //         console.error('ImageError!', e);\n    //     });\n\n    //     xhr.open('GET', this.url, true);\n    //     xhr.overrideMimeType('text/plain; charset=x-user-defined');\n    //     xhr.send(null);\n    // }\n}\n"],"sourceRoot":"/source/"}