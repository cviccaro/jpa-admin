{"version":3,"sources":["shared/components/panel2/form/autocomplete/autocomplete.component.ts"],"names":[],"mappings":"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","file":"shared/components/panel2/form/autocomplete/autocomplete.component.js","sourcesContent":["import {\r\n    Component,\r\n    Input,\r\n    Output,\r\n    EventEmitter,\r\n    forwardRef,\r\n    Provider,\r\n    AfterViewInit,\r\n    ViewChild,\r\n    ElementRef,\r\n    OnInit\r\n} from '@angular/core';\r\n\r\nimport { ChipComponent } from '../../../chip/index';\r\nimport { MATERIAL_DIRECTIVES } from '../../../../libs/angular2-material';\r\nimport { Observable } from 'rxjs/Rx';\r\n\r\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor, NgModel } from '@angular/forms';\r\n\r\nexport const AUTOCOMPLETE_VALUE_ACCESSOR = new Provider(NG_VALUE_ACCESSOR, {\r\n    useExisting: forwardRef(() => AutoCompleteFormControl),\r\n    multi: true\r\n});\r\nconst noop = () => { };\r\n\r\n@Component({\r\n    moduleId: module.id,\r\n    selector: 'jpa-autocomplete-form-control',\r\n    templateUrl: './autocomplete.component.html',\r\n    styleUrls: ['./autocomplete.component.css'],\r\n    directives: [ ChipComponent, MATERIAL_DIRECTIVES ],\r\n    providers: [ AUTOCOMPLETE_VALUE_ACCESSOR ]\r\n})\r\nexport class AutoCompleteFormControl implements ControlValueAccessor, OnInit, AfterViewInit {\r\n    private _focused: boolean = false;\r\n    private _value: any = [];\r\n    private _model: any;\r\n\r\n    private workingValue: any = [];\r\n    private _dropzone: number;\r\n\r\n    private _originalOptions: any[];\r\n\r\n    /** Callback registered via registerOnTouched (ControlValueAccessor) */\r\n    private _onTouchedCallback: () => void = noop;\r\n    /** Callback registered via registerOnChange (ControlValueAccessor) */\r\n    private _onChangeCallback: (_: any) => void = noop;\r\n\r\n    get debug() {\r\n        return {\r\n            value: this.value,\r\n            _value: this._value,\r\n            workingValue: this.workingValue\r\n        };\r\n    }\r\n\r\n    @Output() change = new EventEmitter();\r\n\r\n    @Input() name: string;\r\n    @Input() required: boolean = false;\r\n    @Input() options: { label: string, value: any }[];\r\n\r\n    @ViewChild('input') private _inputElement: ElementRef;\r\n\r\n    get empty() { return this.value !== null && this.value !== ''; }\r\n\r\n    get value() { return this._value; }\r\n    @Input() set value(v: any) {\r\n        console.debug('AutoCompleteFormControl set value ', v);\r\n        if (v !== this._value) {\r\n            console.log('AutoCompleteFormControl set value confirmed', v);\r\n            this._value = v;\r\n            let _v = v.length === 0 ? '' : v;\r\n            this._onChangeCallback(_v);\r\n            this.change.emit(v);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Implemented as part of ControlValueAccessor.\r\n     */\r\n    writeValue(value: any) {\r\n        console.log('AutoCompleteFormControl WriteValue', value);\r\n        this._value = value;\r\n        if (value !== null) this.setOptions();\r\n    }\r\n    registerOnChange(fn: any) {\r\n        this._onChangeCallback = fn;\r\n    }\r\n    registerOnTouched(fn: any) {\r\n        this._onTouchedCallback = fn;\r\n    }\r\n\r\n    ngOnInit() {\r\n        console.log('AutoCompleteFormControl ngOnInit ', this);\r\n        this._originalOptions = this.options;\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n       // this.value = this._inputElement.nativeElement.value;\r\n        console.log('AutoCompleteFormControl ngAfterViewInit', this);\r\n    }\r\n\r\n    setOptions() {\r\n        this._model = this.value;\r\n\r\n        console.debug('AutoCompleteFormControl setOptions ', {workingValue: this.workingValue, this: this});\r\n\r\n        if (this.options) {\r\n            console.warn('filtering options!', this.options);\r\n            let ids = this.value.map(item => item.id);\r\n            this.options = this._originalOptions.filter(option => {\r\n                return ids.indexOf(option.id) === -1;\r\n            });\r\n        }\r\n    }\r\n\r\n    remove(id) {\r\n        console.log('AutoCompleteComponent#remove ', this);\r\n        let filtered = this.value.filter(item => {\r\n            return item.id === id\r\n        })\r\n\r\n        if (filtered && filtered.length) {\r\n            let index = this.value.indexOf(filtered[0]);\r\n            let value = this.value.slice(0);\r\n            value.splice(index, 1);\r\n            this.value = value;\r\n            //console.log('set value to ', value);\r\n            this.setOptions();\r\n            // this._onChangeCallback(this.value);\r\n            // this._onTouchedCallback();\r\n        }\r\n\r\n        this._onTouchedCallback();\r\n        //this._valueChanged = true;\r\n    }\r\n}"],"sourceRoot":"/source/"}