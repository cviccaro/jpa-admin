{"version":3,"sources":["shared/components/panel2/form/control.autocomplete.ts"],"names":[],"mappings":";;;;;;AAAA,wBAAyD,WAAW,CAAC,CAAA;AAQrE;IAAkD,gDAA4B;IAU1E,sCAAY,MAA0B;QACpC,kBAAM,MAAM,CAAC,CAAC;QAVhB,gBAAW,GAAG,cAAc,CAAC;QAY3B,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,IAAI,EAAE,CAAC;IACtC,CAAC;IAVD,sBAAI,+CAAK;aAAT;YACI,EAAE,CAAC,CAAC,OAAO,IAAI,CAAC,KAAK,KAAK,WAAW,CAAC;gBAAC,MAAM,CAAC,IAAI,CAAC;YAEnD,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,CAAC;QACnC,CAAC;;;OAAA;IAQD,8CAAO,GAAP,UAAQ,aAAsB;QAC1B,MAAM,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC;IAiBjD,CAAC;IAWL,mCAAC;AAAD,CA7CA,AA6CC,CA7CiD,0BAAgB,GA6CjE;AA7CY,oCAA4B,+BA6CxC,CAAA","file":"shared/components/panel2/form/control.autocomplete.js","sourcesContent":["import { PanelFormControl, PanelFormControlConfig } from './control';\r\n\r\nimport { Observable } from 'rxjs/Rx';\r\n\r\nexport interface AutoCompleteConfig extends PanelFormControlConfig {\r\n    options: {id: number, name: string}[];\r\n}\r\n\r\nexport class PanelFormControlAutoComplete extends PanelFormControl<Array<any>> {\r\n    controlType = 'autocomplete';\r\n    options: {id: number, name: string}[];\r\n\r\n    get empty(): boolean {\r\n        if (typeof this.value === 'undefined') return true;\r\n\r\n        return this.value.length === 0;\r\n    }\r\n\r\n    constructor(config: AutoCompleteConfig) {\r\n      super(config);\r\n\r\n      this.options = config.options || [];\r\n    }\r\n\r\n    summary(panelExpanded: boolean) {\r\n        return { text: 'omg!', icon: this.editIcon };\r\n        // if (panelExpanded) {\r\n        //     return { text: this.editableText, icon: this.editIcon };\r\n        // }\r\n\r\n        // if (this.value.length > 5) {\r\n        //     return { text: this.value.length + ' selected', icon: false};\r\n        // } else {\r\n        //     let val = this.value.slice(0);\r\n        //     let text: string = val.shift().name;\r\n\r\n        //     if (val.length) {\r\n        //         text = val.reduce((carry, item) => { return carry += ', ' + item.name }, text);\r\n        //     }\r\n\r\n        //     return { text: text, icon: false};\r\n        // }\r\n    }\r\n\r\n    // summary(panelExpanded: boolean): Observable<{ text: any, icon: string|boolean }> {\r\n    //     return Observable.create(observer => {\r\n    //         let summary = panelExpanded ?\r\n    //             { text: this.editableText, icon: this.editIcon }\r\n    //             : {text: this.value.length + ' selected', icon: false};\r\n\r\n    //         observer.next(summary);\r\n    //     });\r\n    // }\r\n}\r\n"],"sourceRoot":"/source/"}