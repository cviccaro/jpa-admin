{"version":3,"sources":["shared/components/panel2/form/control.ts"],"names":[],"mappings":"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","file":"shared/components/panel2/form/control.js","sourcesContent":["export interface PanelFormControlCondition {\r\n    target: string;\r\n    condition: (source: PanelFormControl<any>, target: PanelFormControl<any>) => boolean;\r\n    action: string;\r\n}\r\n\r\nexport interface PanelFormControlConfig {\r\n    name: string;\r\n    required?: boolean;\r\n    order?: number;\r\n    label?: string;\r\n    placeholder?: string;\r\n    editText?: string;\r\n    emptyText?: string;\r\n    editIcon?: string|boolean;\r\n    hidden?: boolean;\r\n    conditions?: PanelFormControlCondition[];\r\n}\r\n\r\nexport class PanelFormControl<T> {\r\n    value: T;\r\n    controlType: string;\r\n    hidden: boolean;\r\n\r\n    name: string;\r\n    required: boolean = false;\r\n    order: number;\r\n    label: string;\r\n    placeholder: string;\r\n    editIcon: string|boolean;\r\n    editText: string;\r\n    emptyText: string;\r\n    conditions: PanelFormControlCondition[];\r\n\r\n    get empty(): boolean {\r\n        return this.value === undefined;\r\n    }\r\n\r\n    get editableText(): string {\r\n        if (this.empty) return this.emptyText;\r\n\r\n        return this.editText;\r\n    }\r\n\r\n    constructor(config: PanelFormControlConfig) {\r\n        if (!config.label) {\r\n            // @todo: drop label property?\r\n            config.label = config.name.substr(0,1).toUpperCase() + config.name.substr(1,config.name.length-1);\r\n            config.placeholder = config.label;\r\n        }\r\n\r\n        config.editText = config.editText || 'Edit ' + config.label;\r\n        config.emptyText = config.emptyText || 'Add ' + config.label;\r\n\r\n        if (config.editIcon !== false) {\r\n            config.editIcon = config.editIcon || 'help_outline';\r\n        }\r\n\r\n        Object.assign(this, config);\r\n    }\r\n\r\n    summary(panelExpanded: boolean): { text: any, icon: string|boolean } {\r\n        if (panelExpanded || this.empty) return { text: this.editableText, icon: this.editIcon };\r\n\r\n        return { text: this.value, icon: false };\r\n    }\r\n\r\n    // summary(panelExpanded: boolean): Observable<{ text: any, icon: string|boolean }> {\r\n    //     return Observable.create(observer => {\r\n    //         if (panelExpanded || this.empty) {\r\n    //             observer.next({ text: this.editText, icon: this.editIcon });\r\n    //         } else {\r\n    //             observer.next({ text: this.value, icon: false });\r\n    //         }\r\n    //     });\r\n    // }\r\n\r\n    evaluateConditions(inputs: PanelFormControl<any>[]) {\r\n        if (this.conditions) {\r\n            this.conditions.forEach((condition: PanelFormControlCondition) => {\r\n                let target:any = false;\r\n\r\n                inputs.forEach((input: PanelFormControl<any>) => {\r\n                    if (input.name === condition.target) target = input;\r\n                });\r\n\r\n                if (target) {\r\n                    let result = condition.condition.apply(this, [this, target]);\r\n\r\n                    switch(condition.action) {\r\n                        case 'hidden':\r\n                            this.hidden = result;\r\n                            break;\r\n                        case 'required':\r\n                            this.required = result;\r\n                            break;\r\n                    }\r\n                } else {\r\n                    console.warn(`No target field \"${condition.target}\" was found while checking condition for source field ${this.name}`);\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}