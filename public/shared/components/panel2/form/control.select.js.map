{"version":3,"sources":["shared/components/panel2/form/control.select.ts"],"names":[],"mappings":";;;;;;AAAA,wBAAyD,WAAW,CAAC,CAAA;AAQrE;IAA4C,0CAA+B;IASvE,gCAAY,MAAoB;QAC9B,kBAAM,MAAM,CAAC,CAAC;QAThB,gBAAW,GAAG,QAAQ,CAAC;QAEvB,YAAO,GAAY,KAAK,CAAC;QASvB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,IAAI,EAAE,CAAC;IACtC,CAAC;IARD,sBAAI,yCAAK;aAAT;YACI,MAAM,CAAC,CAAC,OAAO,IAAI,CAAC,KAAK,KAAK,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,KAAK,SAAS,IAAI,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAC7H,CAAC;;;OAAA;IAQD,wCAAO,GAAP,UAAQ,aAAsB;QAA9B,iBAMC;QALG,EAAE,CAAC,CAAC,aAAa,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YAC9B,MAAM,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC;QACxD,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,KAAK,IAAI,KAAI,CAAC,KAAK,EAA1B,CAA0B,CAAC,CAAC,KAAK,EAAE,IAAI,EAAE,KAAK,EAAC,CAAC;QAC/F,CAAC;IACL,CAAC;IAWL,6BAAC;AAAD,CAhCA,AAgCC,CAhC2C,0BAAgB,GAgC3D;AAhCY,8BAAsB,yBAgClC,CAAA","file":"shared/components/panel2/form/control.select.js","sourcesContent":["import { PanelFormControl, PanelFormControlConfig } from './control';\n\nimport { Observable } from 'rxjs/Rx';\n\nexport interface SelectConfig extends PanelFormControlConfig {\n    options: {label: any, value: any}[];\n}\n\nexport class PanelFormControlSelect extends PanelFormControl<string|number> {\n    controlType = 'select';\n    options: {label: string, value: any}[];\n    focused: boolean = false;\n\n    get empty(): boolean {\n        return (typeof this.value === \"number\") ? (this.value === undefined || this.value === null) : this.value['length'] === 0;\n    }\n\n    constructor(config: SelectConfig) {\n      super(config);\n\n      this.options = config.options || [];\n    }\n\n    summary(panelExpanded: boolean) {\n        if (panelExpanded || this.empty) {\n            return { text: this.editText, icon: this.editIcon };\n        } else {\n            return { text: this.options.find(option => option.value == this.value).label, icon: false};\n        }\n    }\n\n    // summary(panelExpanded: boolean): Observable<{ text: any, icon: string|boolean }> {\n    //     return Observable.create(observer => {\n    //         if (panelExpanded || this.empty) {\n    //             observer.next({ text: this.editText, icon: this.editIcon });\n    //         } else {\n    //             observer.next({ text: this.options.find(option => option.value == this.value).label, icon: false});\n    //         }\n    //     });\n    // }\n}\n"],"sourceRoot":"/source/"}