{"version":3,"sources":["shared/components/panel/panel.component.ts"],"names":[],"mappings":"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","file":"shared/components/panel/panel.component.js","sourcesContent":["import {\r\n    forwardRef,\r\n    Component,\r\n    HostBinding,\r\n    Input,\r\n    Provider,\r\n    Directive,\r\n    OnInit,\r\n    AfterViewInit,\r\n    AfterContentInit,\r\n    AfterViewChecked,\r\n    ContentChild,\r\n    SimpleChange,\r\n    ContentChildren,\r\n    ViewChild,\r\n    ViewChildren,\r\n    ElementRef,\r\n    QueryList,\r\n    OnChanges,\r\n    EventEmitter,\r\n    Output,\r\n} from '@angular/core';\r\nimport { SlicePipe, NgIf } from '@angular/common';\r\nimport {NgModel, NgSelectOption, ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport {BooleanFieldValue} from '@angular2-material/core/annotations/field-value';\r\nimport {MdError} from '@angular2-material/core/errors/error';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport { MdHint } from '@angular2-material/input';\r\nimport { MD_GRID_LIST_DIRECTIVES, MdGridList } from '@angular2-material/grid-list';\r\nimport { MATERIAL_DIRECTIVES } from '../../libs/angular2-material';\r\nimport { JpaPanelContent } from './content/index';\r\nimport {ImageUploadComponent} from '../image-upload/index';\r\n\r\nexport const JPA_PANEL_VALUE_ACCESSOR = new Provider(NG_VALUE_ACCESSOR, {\r\n    useExisting: forwardRef(() => JpaPanel),\r\n    multi: true\r\n});\r\n\r\nconst noop = () => { };\r\n\r\n// Invalid input type. Using one of these will throw an JpaPanelUnsupportedTypeError.\r\nconst JPA_PANEL_VALID_INPUT_TYPE = [\r\n    'text',\r\n    'select',\r\n    'textarea',\r\n    'image',\r\n    'images'\r\n    // 'checkbox',\r\n    // 'number',\r\n    // 'date'\r\n];\r\n\r\nconst JPA_PANEL_UNDERLINE_HIDDEN = [\r\n    'textarea',\r\n    'image',\r\n    'images'\r\n];\r\n\r\nlet nextUniqueId = 0;\r\n\r\nexport class JpaPanelUnsupportedTypeError extends MdError {\r\n    constructor(type: string) {\r\n        super(`Input type \"${type}\" isn't supported by jpa-panel.`);\r\n    }\r\n}\r\n\r\nexport class JpaPanelDuplicatedHintError extends MdError {\r\n    constructor(align: string) {\r\n        super(`A hint was already declared for 'align=\"${align}\"'.`);\r\n    }\r\n}\r\n\r\n@Component({\r\n    moduleId: module.id,\r\n    selector: 'jpa-panel',\r\n    templateUrl: './panel.component.html',\r\n    styleUrls: ['./panel.component.css'],\r\n    directives: [\r\n        MATERIAL_DIRECTIVES,\r\n        NgIf,\r\n        NgModel,\r\n        NgSelectOption,\r\n        JpaPanelContent,\r\n        ImageUploadComponent\r\n        // FILE_UPLOAD_DIRECTIVES,\r\n        // MD_GRID_LIST_DIRECTIVES\r\n    ],\r\n    providers: [JPA_PANEL_VALUE_ACCESSOR],\r\n    pipes: [SlicePipe],\r\n    host: {\r\n        '(click)': 'focus()'\r\n    }\r\n})\r\nexport class JpaPanel implements OnInit, AfterViewInit, AfterContentInit, OnChanges, ControlValueAccessor {\r\n    private _focused: boolean = false;\r\n    private _expanded: boolean = false;\r\n    private _value: any = '';\r\n    private _empty: boolean = false;\r\n    private _summary: any = '';\r\n    private _underlineHidden: boolean = false;\r\n    private _isTextfield: boolean = false;\r\n    private _isTextarea: boolean = false;\r\n    private _isImage: boolean = false;\r\n    private _isGallery: boolean = false;\r\n    private _isSelect: boolean = false;\r\n    private _hasContent: boolean = false;\r\n    private _hasContentRight: boolean = false;\r\n    private _hasContentBottom: boolean = false;\r\n\r\n    /** Callback registered via registerOnTouched (ControlValueAccessor) */\r\n    private _onTouchedCallback: () => void = noop;\r\n    /** Callback registered via registerOnChange (ControlValueAccessor) */\r\n    private _onChangeCallback: (_: any) => void = noop;\r\n\r\n    constructor() {}\r\n\r\n\r\n    /**\r\n     * Run right after the data-bound properties have been checked for the first time,\r\n     * and before the children are.  Set up the panel.\r\n     */\r\n    ngOnInit() {\r\n        //console.info('JpaPanel.'+this.type+' ' + this.name + '#onInit ', this.type);\r\n        switch(this.type) {\r\n            case 'text': this._isTextfield = true; break;\r\n            case 'select': this._isSelect = true; break;\r\n            case 'textarea': this._isTextarea = true; break;\r\n            case 'image': this._isImage = true; break;\r\n            case 'images':\r\n                this._isGallery = true;\r\n                this._empty = true;\r\n                console.log('set it to empty');\r\n                this._hasContentBottom = true;\r\n                this.fullWidth = true;\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Aria related inputs.\r\n     */\r\n    @Input('aria-label') ariaLabel: string;\r\n    @Input('aria-labelledby') ariaLabelledBy: string;\r\n    @Input('aria-disabled') @BooleanFieldValue() ariaDisabled: boolean;\r\n    @Input('aria-required') @BooleanFieldValue() ariaRequired: boolean;\r\n    @Input('aria-invalid') @BooleanFieldValue() ariaInvalid: boolean;\r\n\r\n    /**\r\n     * Content directives.\r\n     */\r\n    @ContentChildren(MdHint) private _hintChildren: QueryList<MdHint>;\r\n    @ContentChildren(NgSelectOption) private _optionChildren: QueryList<NgSelectOption>;\r\n    @ContentChildren(JpaPanelContent) private _contentChildren: QueryList<JpaPanelContent>;\r\n    // @ContentChild(MdGridList) private _gridList: MdGridList;\r\n\r\n    /**\r\n     * Form elements\r\n     */\r\n\r\n    @ViewChild('input') private _inputElement: ElementRef;\r\n    @ViewChild('select') private _selectElement: ElementRef;\r\n    @ViewChild('textarea') private _textareaElement: ElementRef;\r\n    @ViewChild('imagePreview') private _imagePreview: ElementRef;\r\n\r\n    /** Readonly properties. */\r\n    get focused() { return this._focused; }\r\n    get empty() { return this._value == null || this._value === ''; }\r\n    get characterCount(): number {\r\n        return this.empty ? 0 : ('' + this._value).length;\r\n    }\r\n    get inputId(): string { return `${this.id}-panel`; }\r\n\r\n    /**\r\n     * Classes\r\n     */\r\n\r\n    @HostBinding('class.focused') get focusedClass () { return this._focused; }\r\n    @HostBinding('class.expanded') get expandedClass () { return this._expanded; }\r\n    @HostBinding('class.changed') get changedClass () { return this._valueChanged; }\r\n\r\n    /**\r\n     * Bindings.\r\n     */\r\n    @Input() dividerColor: 'primary' | 'accent' | 'warn' = 'primary';\r\n    @Input() hintLabel: string = '';\r\n\r\n    @Input() @BooleanFieldValue() autoFocus: boolean = false;\r\n    @Input() @BooleanFieldValue() disabled: boolean = false;\r\n    @Input() id: string = `jpa-panel-${nextUniqueId++}`;\r\n    @Input() max: string = null;\r\n    @Input() maxLength: number = null;\r\n    @Input() min: string = null;\r\n    @Input() minLength: number = null;\r\n    @Input() placeholder: string = null;\r\n    @Input() @BooleanFieldValue() readOnly: boolean = false;\r\n    @Input() @BooleanFieldValue() required: boolean = false;\r\n    @Input() @BooleanFieldValue() spellCheck: boolean = false;\r\n    @Input() step: number = null;\r\n    @Input() tabIndex: number = null;\r\n    @Input() name: string = null;\r\n    @Input() type: string = 'text';\r\n    @Input() label: string = null;\r\n\r\n    @Input() currentImage: string = null;\r\n    @Input() gallery: any[] = [];\r\n\r\n    @Input() fullWidth: boolean = false;\r\n\r\n    private _blurEmitter: EventEmitter<FocusEvent> = new EventEmitter<FocusEvent>();\r\n    private _focusEmitter: EventEmitter<FocusEvent> = new EventEmitter<FocusEvent>();\r\n    private _expandedEmitter: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n    @Output('blur')\r\n    get onBlur(): Observable<FocusEvent> {\r\n        return this._blurEmitter.asObservable();\r\n    }\r\n\r\n    @Output('focus')\r\n    get onFocus(): Observable<FocusEvent> {\r\n        return this._focusEmitter.asObservable();\r\n    }\r\n\r\n    @Output('expand')\r\n    get onExpand(): Observable<any> {\r\n        return this._expandedEmitter.asObservable();\r\n    }\r\n\r\n    @Output() imageFieldChanged = new EventEmitter();\r\n\r\n    private _initialValue = null;\r\n    private _valueChanged = false;\r\n\r\n    set expanded(v: boolean) { this._expanded = v; }\r\n    get expanded(): boolean { return this._expanded; }\r\n\r\n    get value(): any {\r\n        if (this.type === 'image') {\r\n            return '';\r\n        }\r\n        return this._value;\r\n    };\r\n    @Input() set value(v: any) {\r\n        v = this._convertValueForInputType(v);\r\n        console.debug('JpaPanel'+this.type+'.'+this.name+'# set value(): ', v);\r\n        if (v !== this._value) {\r\n            this._value = v;\r\n            this._onChangeCallback(v);\r\n        }\r\n\r\n        this._empty = this.isEmpty(v);\r\n    }\r\n\r\n    isEmpty(v:any) {\r\n        return v === undefined || v === null || (Array.isArray(v) && v.length === 0) || Object.keys(v).length === 0;\r\n    }\r\n\r\n    @Input() editText: string;\r\n\r\n    get summary(): any {\r\n        return this._summary;\r\n    }\r\n\r\n    set summary(value: any) {\r\n        switch(this.type) {\r\n            case 'select':\r\n                let interval = setInterval(() => {\r\n                    let filtered = this._optionChildren.filter(opt => {\r\n                        return opt['_element']['nativeElement']['value'] == this._value;\r\n                    });\r\n                    if (filtered.length) {\r\n                        this._summary = filtered[0]['_element']['nativeElement']['innerHTML'];\r\n                        clearInterval(interval);\r\n                    }\r\n                }, 250);\r\n                break;\r\n            case 'image':\r\n                this._summary = value || '';\r\n                break;\r\n            case 'images':\r\n                this._setGallerySummary();\r\n                break;\r\n            default:\r\n                this._summary = value;\r\n        }\r\n        // console.debug('JpaPanel.'+this.type+' ' + this.name + '#set summary(): ', this._summary);\r\n    }\r\n\r\n    private _setGallerySummary() {\r\n        if (this.gallery.length) {\r\n            this._summary = this.gallery.length + ' pictures in gallery';\r\n        } else {\r\n            this._summary = '';\r\n        }\r\n    }\r\n\r\n    private _imageLoaded = false;\r\n    private _currentImageSize = null;\r\n\r\n    set currentImageSize(v: {w: number, h: number}) {\r\n        this._currentImageSize = v;\r\n    }\r\n    get currentImageSize() {\r\n        return this._currentImageSize;\r\n    }\r\n\r\n    get nativeElement() {\r\n        switch(this.type) {\r\n            case 'select': return this._selectElement.nativeElement;\r\n            case 'textarea': return this._textareaElement.nativeElement;\r\n            default:\r\n                if (this._inputElement) {\r\n                    return this._inputElement.nativeElement;\r\n                }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /** Set focus on input */\r\n    focus() {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.focus();\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    handleFocus(event: FocusEvent) {\r\n        // console.debug('JpaPanel.'+this.type+' ' + this.name + '#handleFocus ', event);\r\n        if (this.expanded) {\r\n            this._focused = true;\r\n            this._focusEmitter.emit(event);\r\n        } else {\r\n            // console.debug('JpaPanel.'+this.type+' ' + this.name + '#handleFocus: skipping focus for non-expanded panel');\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    handleBlur(event: FocusEvent) {\r\n        // console.debug('JpaPanel.'+this.type+' ' + this.name + '#handleBlur ', event);\r\n        if (this.expanded) {\r\n            this._focused = false;\r\n            this._onTouchedCallback();\r\n            this._blurEmitter.emit(event);\r\n        } else {\r\n            // console.debug('JpaPanel.'+this.type+' ' + this.name + '#handleBlur: skipping blur for non-expanded panel');\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    handleChange(event: any) {\r\n        console.debug('JpaPanel.'+this.type+' ' + this.name + '#handleChange: ', event, this);\r\n        switch (this.type) {\r\n            case 'images':\r\n                this.value = event;\r\n                break;\r\n            case 'select':\r\n                this.value = (<HTMLSelectElement>event.target).value;\r\n                this.summary = this.value;\r\n                break;\r\n            case 'textarea':\r\n                this.value = (<HTMLTextAreaElement>event.target).value;\r\n                this.summary = this.value;\r\n                break;\r\n            case 'image':\r\n                this.imageFieldChanged.emit(event);\r\n                break;\r\n            default:\r\n                this.value = (<HTMLInputElement>event.target).value;\r\n                this.summary = this.value;\r\n                break;\r\n        }\r\n        // console.log('JpaPanel.'+this.type+' ' + this.name + '#handleChange (' + this.type + ') set value for  to ', this.value);\r\n        this._valueChanged = true;\r\n        this._onTouchedCallback();\r\n    }\r\n\r\n    /** @internal */\r\n    hasPlaceholder(): boolean {\r\n        return !!this.placeholder;\r\n    }\r\n\r\n    /**\r\n       * Implemented as part of ControlValueAccessor.\r\n       * TODO: internal\r\n       */\r\n    writeValue(value: any) {\r\n        console.debug('JpaPanel.'+this.type+' ' + this.name + '#writeValue('+this.type+')', value);\r\n        this._value = value;\r\n        if (!this._initialValue) this._initialValue = value;\r\n        switch (this.type) {\r\n            case 'image':\r\n                if (value !== undefined && value !== null) {\r\n                    this.summary = 'New - ' + value.name;\r\n                    break;\r\n                }\r\n            default: this.summary = value; break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Implemented as part of ControlValueAccessor.\r\n     * TODO: internal\r\n     */\r\n    registerOnChange(fn: any) {\r\n        this._onChangeCallback = fn;\r\n    }\r\n\r\n    /**\r\n     * Implemented as part of ControlValueAccessor.\r\n     * TODO: internal\r\n     */\r\n    registerOnTouched(fn: any) {\r\n        this._onTouchedCallback = fn;\r\n    }\r\n\r\n    /** TODO: internal */\r\n    ngAfterContentInit() {\r\n        this._validateConstraints();\r\n\r\n        // Trigger validation when the hint children change.\r\n        this._hintChildren.changes.subscribe(() => {\r\n            this._validateConstraints();\r\n        });\r\n\r\n        if (JPA_PANEL_UNDERLINE_HIDDEN.indexOf(this.type) !== -1) {\r\n            this._underlineHidden = true;\r\n        }\r\n\r\n        this._hasContent = !!this._contentChildren.length;\r\n\r\n        if (this._hasContent) {\r\n            this._contentChildren.forEach(panel => {\r\n                if (panel.align === 'bottom') {\r\n                    this._hasContentBottom = true;\r\n                } else if (panel.align === 'right') {\r\n                    this._hasContentRight = true;\r\n                }\r\n            })\r\n        }\r\n\r\n        // console.debug('JpaPanel.'+this.type+' ' + this.name + '#AfterContentInit', this);\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        switch(this.type) {\r\n            case 'image':\r\n                if (this._imagePreview && this.currentImageSize === null) {\r\n                    this._imagePreview.nativeElement.onload = (e) => {\r\n                        // console.debug('JpaPanel.'+this.type+' ' + this.name + '#AfterViewInit IMAGE LOADED!');\r\n                        this._imageLoaded = true;\r\n                        this.currentImageSize = {w: this._imagePreview.nativeElement.naturalWidth, h: this._imagePreview.nativeElement.naturalHeight};\r\n                        if (!this._expanded) {\r\n                            this._summary = this.currentImageSize.w + 'x' + this.currentImageSize.h + 'px';\r\n                        }\r\n                    };\r\n                }\r\n                this.value = this.nativeElement.value;\r\n            break;\r\n            default:\r\n                if (this.nativeElement) {\r\n                    // console.log('JpaPanel.'+this.type+' ' + this.name + '#AfterViewInit : found nativeElement.',this.nativeElement);\r\n                    this.value = this.nativeElement.value;\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    /** TODO: internal */\r\n    ngOnChanges(changes: { [key: string]: SimpleChange }) {\r\n        console.log('JpaPanel.'+this.type+' ' + this.name + '#OnChanges() : ', changes);\r\n        this._validateConstraints();\r\n    }\r\n\r\n    /**\r\n     * Convert the value passed in to a value that is expected from the type of the md-input.\r\n     * This is normally performed by the *_VALUE_ACCESSOR in forms, but since the type is bound\r\n     * on our internal input it won't work locally.\r\n     * @private\r\n     */\r\n    private _convertValueForInputType(v: any): any {\r\n        switch (this.type) {\r\n            case 'number': return parseFloat(v);\r\n            default: return v;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Ensure that all constraints defined by the API are validated, or throw errors otherwise.\r\n     * Constraints for now:\r\n     *   - placeholder attribute and <md-placeholder> are mutually exclusive.\r\n     *   - type attribute is not one of the forbidden types (see constant at the top).\r\n     *   - Maximum one of each `<md-hint>` alignment specified, with the attribute being\r\n     *     considered as align=\"start\".\r\n     * @private\r\n     */\r\n    private _validateConstraints() {\r\n        if (JPA_PANEL_VALID_INPUT_TYPE.indexOf(this.type) === -1) {\r\n            throw new JpaPanelUnsupportedTypeError(this.type);\r\n        }\r\n\r\n        if (this._hintChildren) {\r\n            // Validate the hint labels.\r\n            let startHint: MdHint = null;\r\n            let endHint: MdHint = null;\r\n            this._hintChildren.forEach((hint: MdHint) => {\r\n                if (hint.align == 'start') {\r\n                    if (startHint || this.hintLabel) {\r\n                        throw new JpaPanelDuplicatedHintError('start');\r\n                    }\r\n                    startHint = hint;\r\n                } else if (hint.align == 'end') {\r\n                    if (endHint) {\r\n                        throw new JpaPanelDuplicatedHintError('end');\r\n                    }\r\n                    endHint = hint;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Internal\r\n     */\r\n\r\n    toggle($event) {\r\n        $event.preventDefault();\r\n        $event.stopPropagation();\r\n        this._expanded = !this._expanded;\r\n\r\n        this.onToggle();\r\n    }\r\n\r\n    /** internal **/\r\n    onToggle() {\r\n        this._expandedEmitter.emit(this._expanded);\r\n        if (this._hasContent) {\r\n            this._contentChildren.forEach(panelContent => {\r\n                panelContent.onToggle(this._expanded);\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    onGalleryImageUpload(e: any) {\r\n        console.log('PanelComponent# onGalleryImageUpload ', e);\r\n        this._setGallerySummary();\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}