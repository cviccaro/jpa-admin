{"version":3,"sources":["shared/components/modal/provider.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAAwG,eAAe,CAAC,CAAA;AAExH,mBAA+C,SAAS,CAAC,CAAA;AACzD,QAAO,yBAAyB,CAAC,CAAA;AAQjC;IAaI,kBAAoB,GAAsB;QAb9C,iBA6BC;QAhBuB,QAAG,GAAH,GAAG,CAAmB;QAPlC,aAAQ,GAAgB;YAC5B,MAAM,EAAE,SAAS;YACjB,UAAU,EAAE,QAAQ;YACpB,IAAI,EAAE,OAAO;YACb,OAAO,EAAE,eAAe;SAC3B,CAAC;QAGE,IAAI,CAAC,SAAS,GAAG,IAAI,eAAU,CAAc,UAAA,QAAQ,IAAI,OAAA,KAAI,CAAC,UAAU,GAAG,QAAQ,EAA1B,CAA0B,CAAC,CAAC,KAAK,EAAE,CAAC;IAEjG,CAAC;IAED,uBAAI,GAAJ,UAAK,MAAmB;QAAxB,iBAUC;QATG,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QAC9C,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YACnB,MAAM,IAAI,KAAK,CAAC,8DAA8D,CAAC,CAAC;QACpF,CAAC;QAED,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC7B,OAAO,CAAC,GAAG,CAAC,0BAA0B,EAAE,MAAM,CAAC,CAAC;QAEhD,MAAM,CAAC,eAAU,CAAC,MAAM,CAAC,UAAA,QAAQ,IAAI,OAAA,KAAI,CAAC,aAAa,GAAG,QAAQ,EAA7B,CAA6B,CAAC,CAAC;IACxE,CAAC;IA7BL;QAAC,iBAAU,EAAE;;gBAAA;IA8Bb,eAAC;AAAD,CA7BA,AA6BC,IAAA;AA7BY,gBAAQ,WA6BpB,CAAA","file":"shared/components/modal/provider.js","sourcesContent":["import { Injectable, Inject, ComponentResolver, ComponentRef, ComponentFactory, ViewContainerRef } from '@angular/core';\r\n\r\nimport {Observable, Observer, Subscriber} from 'rxjs/Rx';\r\nimport 'rxjs/add/operator/share';\r\n\r\nimport { ModalConfig } from './modal.interface';\r\nimport { ModalContainerComponent } from './container';\r\nimport { ModalBackdropComponent } from './backdrop';\r\nimport { ModalComponent } from './modal';\r\n\r\n@Injectable()\r\nexport class JpaModal {\r\n    public openModal: Observable<ModalConfig>;\r\n    private _openModal: Observer<ModalConfig>;\r\n\r\n    public buttonClicked: Observer<any>;\r\n\r\n    private defaults: ModalConfig = {\r\n        okText: 'GOT IT!',\r\n        cancelText: 'Cancel',\r\n        mode: 'alert',\r\n        message: 'Are you sure?'\r\n    };\r\n\r\n    constructor(private _cr: ComponentResolver) {\r\n        this.openModal = new Observable<ModalConfig>(observer => this._openModal = observer).share();\r\n\r\n    }\r\n\r\n    open(config: ModalConfig) {\r\n        config = Object.assign(this.defaults, config);\r\n        if (!this._openModal) {\r\n            throw new Error(\"No Modal Containers have been initialized to receive modals.\");\r\n        }\r\n\r\n        this._openModal.next(config);\r\n        console.log('Opened modal with config', config);\r\n\r\n        return Observable.create(observer => this.buttonClicked = observer);\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}