{"version":3,"sources":["shared/components/modal/provider.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAAwG,eAAe,CAAC,CAAA;AAExH,mBAA+C,SAAS,CAAC,CAAA;AACzD,QAAO,yBAAyB,CAAC,CAAA;AAQjC;IA0BI,kBAAoB,GAAsB;QA1B9C,iBAsDC;QA5BuB,QAAG,GAAH,GAAG,CAAmB;QApBlC,WAAM,GAAG,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QAqB/B,IAAI,CAAC,SAAS,GAAG,IAAI,eAAU,CAAc,UAAA,QAAQ,IAAI,OAAA,KAAI,CAAC,UAAU,GAAG,QAAQ,EAA1B,CAA0B,CAAC,CAAC,KAAK,EAAE,CAAC;IAEjG,CAAC;IApBD,sBAAY,8BAAQ;aAApB;YACI,MAAM,CAAA,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;gBACvB,KAAK,MAAM;oBACP,MAAM,CAAC;wBACH,MAAM,EAAE,QAAQ;wBAChB,UAAU,EAAE,QAAQ;wBACpB,MAAM,EAAE,EAAE;qBACb,CAAC;gBACN;oBACI,MAAM,CAAC;wBACH,MAAM,EAAE,SAAS;wBACjB,UAAU,EAAE,QAAQ;wBACpB,OAAO,EAAE,eAAe;qBAC3B,CAAC;YACV,CAAC;QACL,CAAC;;;OAAA;;IAOD,uBAAI,GAAJ,UAAK,MAAmB;QAAxB,iBAsBC;QArBG,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QAEtB,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YAEvC,MAAM,CAAC,IAAI,GAAG,OAAO,CAAC;QAC1B,CAAC;QAED,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QAEpD,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,KAAK,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;YACnE,MAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAC;QACnE,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YACnB,MAAM,IAAI,KAAK,CAAC,8DAA8D,CAAC,CAAC;QACpF,CAAC;QAED,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACnC,OAAO,CAAC,GAAG,CAAC,0BAA0B,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QAEtD,MAAM,CAAC,eAAU,CAAC,MAAM,CAAC,UAAA,QAAQ,IAAI,OAAA,KAAI,CAAC,aAAa,GAAG,QAAQ,EAA7B,CAA6B,CAAC,CAAC;IACxE,CAAC;IAtDL;QAAC,iBAAU,EAAE;;gBAAA;IAuDb,eAAC;AAAD,CAtDA,AAsDC,IAAA;AAtDY,gBAAQ,WAsDpB,CAAA","file":"shared/components/modal/provider.js","sourcesContent":["import { Injectable, Inject, ComponentResolver, ComponentRef, ComponentFactory, ViewContainerRef } from '@angular/core';\n\nimport {Observable, Observer, Subscriber} from 'rxjs/Rx';\nimport 'rxjs/add/operator/share';\n\nimport { ModalConfig } from './modal.interface';\nimport { ModalContainerComponent } from './container';\nimport { ModalBackdropComponent } from './backdrop';\nimport { ModalComponent } from './modal';\n\n@Injectable()\nexport class JpaModal {\n    public openModal: Observable<ModalConfig>;\n    private _openModal: Observer<ModalConfig>;\n\n    public buttonClicked: Observer<any>;\n\n    private _modes = ['alert', 'form'];\n    private _config: ModalConfig;\n\n    private get defaults(): ModalConfig {\n        switch(this._config.mode) {\n            case 'form':\n                return {\n                    okText: 'Create',\n                    cancelText: 'Cancel',\n                    inputs: []\n                };\n            default:\n                return {\n                    okText: 'GOT IT!',\n                    cancelText: 'Cancel',\n                    message: 'Are you sure?'\n                };\n        }\n    };\n\n    constructor(private _cr: ComponentResolver) {\n        this.openModal = new Observable<ModalConfig>(observer => this._openModal = observer).share();\n\n    }\n\n    open(config: ModalConfig) {\n        this._config = config;\n\n        if (this._modes.indexOf(config.mode) < 0) {\n            // Assign a default if no mode is provided\n            config.mode = 'alert';\n        }\n\n        this._config = Object.assign(this.defaults, config);\n\n        if (this._config.mode === 'form' && this._config.inputs.length === 0) {\n            throw new Error('Modal with type \\'form\\' needs some inputs.');\n        }\n\n        if (!this._openModal) {\n            throw new Error(\"No Modal Containers have been initialized to receive modals.\");\n        }\n\n        this._openModal.next(this._config);\n        console.log('Opened modal with config', this._config);\n\n        return Observable.create(observer => this.buttonClicked = observer);\n    }\n}\n"],"sourceRoot":"/source/"}