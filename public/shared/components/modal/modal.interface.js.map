{"version":3,"sources":["shared/components/modal/modal.interface.ts"],"names":[],"mappings":";;;;;;AAAA,+BAA8B,+BAA+B,CAAC,CAAA;AAsC9D;IAAA;QAGI,SAAI,GAAW,MAAM,CAAC;QACtB,aAAQ,GAAY,KAAK,CAAC;QAK1B,WAAM,GAAY,KAAK,CAAC;IAC5B,CAAC;IAAD,uBAAC;AAAD,CAVA,AAUC,IAAA;AAVY,wBAAgB,mBAU5B,CAAA;AAED;IAAoC,kCAAgB;IAGhD,wBAAY,MAAW;QACnB,iBAAO,CAAC;QAHJ,QAAG,GAAkB,IAAI,8BAAa,EAAE,CAAC;QAK7C,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;YAEhB,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAC,MAAM,CAAC,IAAI,CAAC,MAAM,GAAC,CAAC,CAAC,CAAC;YAClG,MAAM,CAAC,WAAW,GAAG,MAAM,CAAC,KAAK,CAAC;QACtC,CAAC;QACD,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IAChC,CAAC;IAED,2CAAkB,GAAlB,UAAmB,MAAwB;QAA3C,iBAyBC;QAxBG,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YAClB,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,UAAC,SAA8B;gBACnD,IAAI,MAAM,GAAO,KAAK,CAAC;gBAEvB,MAAM,CAAC,OAAO,CAAC,UAAC,KAAqB;oBACjC,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,KAAK,SAAS,CAAC,MAAM,CAAC;wBAAC,MAAM,GAAG,KAAK,CAAC;gBACxD,CAAC,CAAC,CAAC;gBAEH,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;oBACT,IAAI,MAAM,GAAG,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,KAAI,EAAE,CAAC,KAAI,EAAE,MAAM,CAAC,CAAC,CAAC;oBAE7D,MAAM,CAAA,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC;wBACtB,KAAK,QAAQ;4BACT,KAAI,CAAC,MAAM,GAAG,MAAM,CAAC;4BACrB,KAAK,CAAC;wBACV,KAAK,UAAU;4BACX,KAAI,CAAC,QAAQ,GAAG,MAAM,CAAC;4BACvB,KAAK,CAAC;oBACd,CAAC;gBACL,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,KAAI,CAAC,GAAG,CAAC,IAAI,CAAC,uBAAoB,SAAS,CAAC,MAAM,+DAAyD,KAAI,CAAC,IAAM,CAAC,CAAC;gBAC5H,CAAC;YACL,CAAC,CAAC,CAAC;QACP,CAAC;IACL,CAAC;IACL,qBAAC;AAAD,CAxCA,AAwCC,CAxCmC,gBAAgB,GAwCnD;AAxCY,sBAAc,iBAwC1B,CAAA","file":"shared/components/modal/modal.interface.js","sourcesContent":["import { LoggerService } from '../../services/logger.service';\n\nexport interface ModalConfig {\n    mode?: string;\n    title?: string;\n    message?: string;\n    buttons?: any[];\n    cancelText?: string;\n    okText?: string;\n    inputs?: ModalInput[];\n    formClass?: any;\n    showTitle?: boolean;\n}\n\nexport interface ModalAction {\n    type: string;\n    config?: any;\n    event: MouseEvent;\n}\n\nexport interface ModalInputCondition {\n    target: string;\n    condition: (source: ModalInput, target: ModalInput) => boolean;\n    action: string;\n}\n\nexport interface ModalInput {\n    label?: string;\n    name: string;\n    type?: string;\n    required?: boolean;\n    placeholder?: string;\n    value?: any;\n    hint?: any;\n    hidden?: boolean;\n    conditions?: ModalInputCondition[];\n}\n\nexport class GenericFormField implements ModalInput {\n    label: string;\n    name: string;\n    type: string = 'text';\n    required: boolean = false;\n    placeholder: string;\n    value: any;\n    hint: any;\n    conditions: ModalInputCondition[];\n    hidden: boolean = false;\n}\n\nexport class ModalFormField extends GenericFormField {\n    private log: LoggerService = new LoggerService();\n\n    constructor(column: any) {\n        super();\n\n        if (!column.label) {\n            // @todo: drop label property?\n            column.label = column.name.substr(0,1).toUpperCase() + column.name.substr(1,column.name.length-1);\n            column.placeholder = column.label;\n        }\n        Object.assign(this, column);\n    }\n\n    evaluateConditions(inputs: ModalFormField[]) {\n        if (this.conditions) {\n            this.conditions.forEach((condition: ModalInputCondition) => {\n                let target:any = false;\n\n                inputs.forEach((input: ModalFormField) => {\n                    if (input.name === condition.target) target = input;\n                });\n\n                if (target) {\n                    let result = condition.condition.apply(this, [this, target]);\n\n                    switch(condition.action) {\n                        case 'hidden':\n                            this.hidden = result;\n                            break;\n                        case 'required':\n                            this.required = result;\n                            break;\n                    }\n                } else {\n                    this.log.warn(`No target field \"${condition.target}\" was found while checking condition for source field ${this.name}`);\n                }\n            });\n        }\n    }\n}\n"],"sourceRoot":"/source/"}