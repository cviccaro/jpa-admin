{"version":3,"sources":["shared/components/dragdrop/dragdrop.component.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAAqE,eAAe,CAAC,CAAA;AAErF,iCAAgC,oBAAoB,CAAC,CAAA;AAGrD;IAIC,mCAAmB,EAAc,EAAS,OAAwB,EAAU,IAAuB;QAJpG,iBAwEC;QApEmB,OAAE,GAAF,EAAE,CAAY;QAAS,YAAO,GAAP,OAAO,CAAiB;QAAU,SAAI,GAAJ,IAAI,CAAmB;QAClG,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC;QAEnC,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,UAAU,EAAE,UAAC,CAAY;YACpD,KAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;YAEpB,EAAE,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gBACpB,CAAC,CAAC,YAAY,CAAC,UAAU,GAAG,MAAM,CAAC;YACpC,CAAC;YAED,MAAM,CAAC,KAAK,CAAC;QACd,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,MAAM,EAAE,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAAf,CAAe,CAAC,CAAC;QAE1D,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,WAAW,EAAE,UAAC,KAAgB;YACzD,OAAO,CAAC,GAAG,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;YACjC,EAAE,CAAC,CAAC,KAAK,CAAC,YAAY,IAAI,IAAI,CAAC,CAAC,CAAC;gBAC7B,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;gBAEvC,KAAK,CAAC,YAAY,CAAC,aAAa,GAAG,MAAM,CAAC;gBAQtC,KAAI,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,MAAM,CAAC;YAIzC,CAAC;QACF,CAAC,CAAC,CAAA;QAEF,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,SAAS,EAAE,UAAC,KAAgB;YACvD,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;YAC9B,KAAI,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,KAAI,CAAC,cAAc,CAAC;QAC/C,CAAC,CAAC,CAAC;IACJ,CAAC;IAEO,+CAAW,GAAnB,UAAoB,KAAgB;QACnC,EAAE,CAAC,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC;YAC1B,KAAK,CAAC,cAAc,EAAE,CAAC;QACxB,CAAC;IACF,CAAC;IAEO,2CAAO,GAAf,UAAgB,KAAgB;QAC/B,EAAE,CAAC,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC;YAE1B,KAAK,CAAC,cAAc,EAAE,CAAC;QACxB,CAAC;QAED,EAAE,CAAC,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC;YAE3B,KAAK,CAAC,eAAe,EAAE,CAAC;QACzB,CAAC;QAED,IAAI,CAAC,aAAa,EAAE,CAAC;IACtB,CAAC;IAGD,iDAAa,GAAb;QAAA,iBAKC;QAHG,UAAU,CAAC;YACP,KAAI,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC;QAC9B,CAAC,EAAE,GAAG,CAAC,CAAC;IACZ,CAAC;IAxEF;QAAC,iBAAU,EAAE;;iCAAA;IAyEb,gCAAC;AAAD,CAxEA,AAwEC,IAAA;AAxEqB,iCAAyB,4BAwE9C,CAAA","file":"shared/components/dragdrop/dragdrop.component.js","sourcesContent":["import { Component, Injectable, ElementRef, ChangeDetectorRef } from '@angular/core';\r\n\r\nimport { DragDropService } from './dragdrop.service';\r\n\r\n@Injectable()\r\nexport abstract class DragDropAbstractComponent {\r\n\t_elem: HTMLElement;\r\n\t_defaultCursor: string;\r\n\r\n\tconstructor(public el: ElementRef, public service: DragDropService, private _cdr: ChangeDetectorRef) {\r\n\t\tthis._elem = this.el.nativeElement;\r\n\r\n\t\tthis._elem.addEventListener('dragover', (e: DragEvent) => {\r\n\t\t\tthis._onDragOver(e);\r\n\r\n\t\t\tif (e.dataTransfer) {\r\n\t\t\t\te.dataTransfer.dropEffect = 'copy';\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\r\n\t\t});\r\n\r\n\t\tthis._elem.addEventListener('drop', e => this._onDrop(e));\r\n\r\n\t\tthis._elem.addEventListener('dragstart', (event: DragEvent) => {\r\n\t\t\tconsole.log('drag start', event);\r\n\t\t\tif (event.dataTransfer != null) {\r\n\t\t\t    event.dataTransfer.setData('text', '');\r\n\t\t\t    // Change drag effect\r\n\t\t\t    event.dataTransfer.effectAllowed = 'copy';\r\n\t\t\t    // Change drag image\r\n\t\t\t    // if (this._config.dragImage != null) {\r\n\t\t\t    //     let dragImage: DragImage = this._config.dragImage;\r\n\t\t\t    //     (<any>event.dataTransfer).setDragImage(dragImage.imageElement, dragImage.x_offset, dragImage.y_offset);\r\n\t\t\t    // }\r\n\t\t\t    // Change drag cursor\r\n\t\t\t    //if (this._dragEnabled) {\r\n\t\t\t        this._elem.style.cursor = 'move';\r\n\t\t\t    // } else {\r\n\t\t\t    //     this._elem.style.cursor = this._defaultCursor;\r\n\t\t\t    // }\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis._elem.addEventListener('dragend', (event: DragEvent) => {\r\n\t\t\tconsole.log('drag end', eval);\r\n\t\t\tthis._elem.style.cursor = this._defaultCursor;\r\n\t\t});\r\n\t}\r\n\r\n\tprivate _onDragOver(event: DragEvent): void {\r\n\t\tif (event.preventDefault) {\r\n\t\t\tevent.preventDefault();\r\n\t\t}\r\n\t}\r\n\r\n\tprivate _onDrop(event: DragEvent): void {\r\n\t\tif (event.preventDefault) {\r\n\t\t\t// Necessary. Allows us to drop.\r\n\t\t\tevent.preventDefault();\r\n\t\t}\r\n\r\n\t\tif (event.stopPropagation) {\r\n\t\t\t// Necessary. Allows us to drop.\r\n\t\t\tevent.stopPropagation();\r\n\t\t}\r\n\r\n\t\tthis.detectChanges();\r\n\t}\r\n\r\n\r\n\tdetectChanges() {\r\n\t    // Programmatically run change detection to fix issue in Safari\r\n\t    setTimeout(() => {\r\n\t        this._cdr.detectChanges();\r\n\t    }, 250);\r\n\t}\r\n}\r\n"],"sourceRoot":"/source/"}