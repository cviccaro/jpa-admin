{"version":3,"sources":["shared/components/dragdrop/drop-zones/drop-zone-cell.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA6F,eAAe,CAAC,CAAA;AAE7G,IAAI,YAAY,GAAG,CAAC,CAAC;AAMrB;IAkCC,sBAAmB,EAAc;QAAd,OAAE,GAAF,EAAE,CAAY;QA/BzB,OAAE,GAAG,YAAY,EAAE,CAAC;QAElB,gBAAW,GAAG,IAAI,mBAAY,EAAE,CAAC;QACjC,aAAQ,GAAG,IAAI,mBAAY,EAAE,CAAC;QAC9B,WAAM,GAAG,IAAI,mBAAY,EAAE,CAAC;QAC5B,YAAO,GAAG,IAAI,mBAAY,EAAE,CAAC;IA0BF,CAAC;IAxBD,sBAAI,2CAAiB;aAArB,cAA0B,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;;;OAAA;IAG7E,kCAAW,GAAX,UAAY,KAAgB;QAE3B,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAChC,CAAC;IAGD,kCAAW,GAAX,UAAY,KAAgB;QAE3B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAC7B,CAAC;IAGD,gCAAS,GAAT,UAAU,KAAgB;QACzB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAC5B,CAAC;IAGD,mCAAY,GAAZ,UAAa,CAAC;QACb,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAC3B,CAAC;IAID,+BAAQ,GAAR;QACC,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,KAAK,CAAC,KAAK,GAAG,cAAc,GAAG,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;QACrE,OAAO,CAAC,GAAG,CAAC,qCAAqC,EAAE,IAAI,CAAC,CAAC;IAC1D,CAAC;IAtCD;QAAC,YAAK,EAAE;;8CAAA;IAIR;QAAC,aAAM,EAAE;;qDAAA;IACT;QAAC,aAAM,EAAE;;kDAAA;IACT;QAAC,aAAM,EAAE;;gDAAA;IACT;QAAC,aAAM,EAAE;;iDAAA;IAET;QAAC,kBAAW,CAAC,sBAAsB,CAAC;;yDAAA;IAEpC;QAAC,mBAAY,CAAC,WAAW,CAAC;;;;mDAAA;IAM1B;QAAC,mBAAY,CAAC,WAAW,CAAC;;;;mDAAA;IAM1B;QAAC,mBAAY,CAAC,SAAS,CAAC;;;;iDAAA;IAKxB;QAAC,mBAAY,CAAC,MAAM,CAAC;;;;oDAAA;IAjCtB;QAAC,gBAAS,CAAC;YACV,QAAQ,EAAE,gBAAgB;YAC1B,QAAQ,EAAE,EAAE;SACZ,CAAC;;oBAAA;IAyCF,mBAAC;AAAD,CAxCA,AAwCC,IAAA;AAxCY,oBAAY,eAwCxB,CAAA","file":"shared/components/dragdrop/drop-zones/drop-zone-cell.js","sourcesContent":["import { Component, Input, Output,HostBinding, ElementRef, HostListener, EventEmitter } from '@angular/core';\r\n\r\nlet nextUniqueId = 0;\r\n\r\n@Component({\r\n\tselector: 'drop-zone-cell',\r\n\ttemplate: '',\r\n})\r\nexport class DropZoneCell {\r\n\t@Input() cols : number;\r\n\r\n\tprivate id = nextUniqueId++;\r\n\r\n\t@Output() zoneEntered = new EventEmitter();\r\n\t@Output() zoneLeft = new EventEmitter();\r\n\t@Output() onDrop = new EventEmitter();\r\n\t@Output() dragEnd = new EventEmitter();\r\n\r\n\t@HostBinding('class.drop-zone-cell') get dropZoneCellClass() { return true; }\r\n\r\n\t@HostListener('dragenter')\r\n\tonDragEnter(event: DragEvent) {\r\n\t\t// console.log('Drop Zone Cell ' + this.id + ' Drag Enter', event);\r\n\t\tthis.zoneEntered.emit(this.id);\r\n\t}\r\n\r\n\t@HostListener('dragleave')\r\n\tonDragLeave(event: DragEvent) {\r\n\t\t// console.log('Drop Zone Cell ' + this.id + ' Drag Leave', event);\r\n\t\tthis.zoneLeft.emit(this.id);\r\n\t}\r\n\r\n\t@HostListener('dragend')\r\n\tonDragEnd(event: DragEvent) {\r\n\t\tthis.dragEnd.emit(this.id);\r\n\t}\r\n\r\n\t@HostListener('drop')\r\n\thandleOnDrop(e) {\r\n\t\tthis.onDrop.emit(this.id);\r\n\t}\r\n\r\n\tconstructor(public el: ElementRef) { }\r\n\r\n\tngOnInit() {\r\n\t\tthis.el.nativeElement.style.width = 'calc(100% / ' + this.cols + ')';\r\n\t\tconsole.log('DropZoneCell directive initialized.', this);\r\n\t}\r\n}\r\n"],"sourceRoot":"/source/"}