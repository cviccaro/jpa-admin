{"version":3,"sources":["shared/middleware/project.guard.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA8C,eAAe,CAAC,CAAA;AAC9D,uBAAoD,iBAAiB,CAAC,CAAA;AAEtE,sBAA8C,mBAAmB,CAAC,CAAA;AAElE,mBAAmD,SAAS,CAAC,CAAA;AAG7D;IAII,sBAAoB,cAA8B,EAAU,aAA4B,EAAU,KAAqB;QAAnG,mBAAc,GAAd,cAAc,CAAgB;QAAU,kBAAa,GAAb,aAAa,CAAe;QAAU,UAAK,GAAL,KAAK,CAAgB;QAH/G,SAAI,GAAmB,EAAE,CAAC;IAGyF,CAAC;IAE5H,+BAAQ,GAAR;IAKA,CAAC;IAED,kCAAW,GAAX;QAAA,iBA+BC;QA9BC,OAAO,CAAC,GAAG,CAAC,kCAAkC,EAAE,IAAI,CAAC,CAAC;QACtD,MAAM,CAAC,eAAU,CAAC,MAAM,CAAC,UAAA,QAAQ;YAC/B,IAAI,UAAU,GAAG,KAAK,CAAC;YACvB,IAAI,UAAU,GAAG,KAAK,CAAC;YAEvB,IAAI,IAAI,GAAG,KAAI,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC,SAAS,CAAC,UAAA,GAAG;gBACjD,KAAI,CAAC,aAAa,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBAC9B,UAAU,GAAG,IAAI,CAAC;gBAClB,EAAE,CAAC,CAAC,UAAU,CAAC;oBAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YAC5C,CAAC,CAAC,CAAC;YAEH,KAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAErB,IAAI,KAAK,GAAG,KAAI,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,UAAA,MAAM;gBAC1C,IAAI,EAAE,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;gBACtB,EAAE,CAAC,CAAC,EAAE,KAAK,SAAS,IAAI,EAAE,KAAK,KAAK,CAAC,CAAC,CAAC;oBACrC,UAAU,GAAG,IAAI,CAAC;gBACpB,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,EAAE,GAAG,CAAC,EAAE,CAAC;oBACT,IAAI,MAAI,GAAG,KAAI,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,UAAA,GAAG;wBACjD,KAAI,CAAC,cAAc,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;wBAC/B,UAAU,GAAG,IAAI,CAAC;wBAClB,EAAE,CAAC,CAAC,UAAU,CAAC;4BAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;oBAC5C,CAAC,CAAC,CAAC;oBACH,KAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAI,CAAC,CAAC;gBACvB,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,KAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACxB,CAAC,CAAC,CAAC;IACL,CAAC;IAED,kCAAW,GAAX;QACI,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,WAAW,EAAE,EAAjB,CAAiB,CAAC,CAAC;IAChD,CAAC;IAjDL;QAAC,iBAAU,EAAE;;oBAAA;IAkDb,mBAAC;AAAD,CAjDA,AAiDC,IAAA;AAjDY,oBAAY,eAiDxB,CAAA","file":"shared/middleware/project.guard.js","sourcesContent":["import { Injectable, OnDestroy, OnInit } from '@angular/core';\r\nimport { CanActivate, ActivatedRoute, Params } from '@angular/router';\r\n\r\nimport { ProjectService, ClientService } from '../services/index';\r\n\r\nimport { Observable, Observer, Subscription } from 'rxjs/Rx';\r\n\r\n@Injectable()\r\nexport class ProjectGuard implements CanActivate, OnDestroy {\r\n    private subs: Subscription[] = [];\r\n    private params: Params;\r\n\r\n    constructor(private projectService: ProjectService, private clientService: ClientService, private route: ActivatedRoute) { }\r\n\r\n    ngOnInit() {\r\n        // this.subs.push(this.route.params.subscribe(params => {\r\n        //     console.info('got params; ', params);\r\n        //     this.params = params;\r\n        // }));\r\n    }\r\n\r\n    canActivate() {\r\n      console.log('ProjectGuard can activate called', this);\r\n      return Observable.create(observer => {\r\n        let gotClients = false;\r\n        let gotProject = false;\r\n\r\n        let _sub = this.clientService.options().subscribe(res => {\r\n            this.clientService.cache(res);\r\n            gotClients = true;\r\n            if (gotProject) observer.complete(true);\r\n        });\r\n\r\n        this.subs.push(_sub);\r\n\r\n        let _sub2 = this.route.params.subscribe(params => {\r\n            let id = params['id'];\r\n            if (id === undefined || id === 'new') {\r\n              gotProject = true;\r\n            } else {\r\n              id = +id;\r\n              let _sub = this.projectService.find(id).subscribe(res => {\r\n                  this.projectService.cache(res);\r\n                  gotProject = true;\r\n                  if (gotClients) observer.complete(true);\r\n              });\r\n              this.subs.push(_sub);\r\n            }\r\n        });\r\n\r\n        this.subs.push(_sub2);\r\n      });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.subs.forEach(sub => sub.unsubscribe());\r\n    }\r\n}"],"sourceRoot":"/source/"}