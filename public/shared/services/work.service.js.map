{"version":3,"sources":["shared/services/work.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA2B,eAAe,CAAC,CAAA;AAC3C,qBAAsC,eAAe,CAAC,CAAA;AACtD,QAAO,uBAAuB,CAAC,CAAA;AAG/B;IAIC,qBAAmB,IAAU;QAAV,SAAI,GAAJ,IAAI,CAAM;QAC5B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IAClB,CAAC;IAED,yBAAG,GAAH,UAAI,MAAe;QAAf,sBAAe,GAAf,WAAe;QAClB,IAAI,KAAK,GAAG,IAAI,sBAAe,EAAE,CAAC;QAElC,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI,MAAM,CAAC,CAAC,CAAC;YACxB,IAAM,KAAK,GAAW,MAAM,CAAC,GAAG,CAAC,CAAC;YAClC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QACvB,CAAC;QAEE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,aAAa,EAAE,EAAC,MAAM,EAAE,KAAK,EAAC,CAAC;aAC/C,GAAG,CAAC,UAAC,GAAG,IAAK,OAAA,GAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC,CAAC;IAClC,CAAC;IAED,6BAAO,GAAP,UAAQ,GAAG;QACP,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;QAChB,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED,6BAAO,GAAP;QACI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;IACrB,CAAC;IAED,0BAAI,GAAJ,UAAK,EAAU,EAAE,MAAgB;QAC1B,EAAE,CAAC,CAAC,MAAM,IAAI,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,SAAS,CAAC,CAAC,CAAC;YACxC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACzB,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,GAAG,EAAE,CAAC;aAC9B,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC,CAAC;IACnC,CAAC;IAED,2BAAK,GAAL,UAAM,IAAI;QACH,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC;QAC1B,MAAM,CAAC,IAAI,CAAC;IACnB,CAAC;IAED,4BAAM,GAAN,UAAO,EAAE,EAAE,UAAU;QACpB,IAAI,GAAG,GAAG,MAAM,CAAC,QAAQ,CAAC,QAAQ,GAAG,IAAI,GAAG,MAAM,CAAC,QAAQ,CAAC,QAAQ,GAAG,QAAQ,GAAG,EAAE,CAAC;QAErF,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,UAAU,CAAC;aACnC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC,CAAC;IAC1B,CAAC;IAED,4BAAM,GAAN,UAAO,UAAU;QAChB,IAAI,GAAG,GAAG,MAAM,CAAC,QAAQ,CAAC,QAAQ,GAAG,IAAI,GAAG,MAAM,CAAC,QAAQ,CAAC,QAAQ,GAAG,OAAO,CAAC;QAE/E,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,UAAU,CAAC;aACpC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC,CAAC;IAC1B,CAAC;IAxDF;QAAC,iBAAU,EAAE;;mBAAA;IAyDb,kBAAC;AAAD,CAxDA,AAwDC,IAAA;AAxDY,mBAAW,cAwDvB,CAAA","file":"shared/services/work.service.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Http, URLSearchParams } from '@angular/http';\nimport 'rxjs/add/operator/map';\n\n@Injectable()\nexport class WorkService {\n\tprivate list: any;\n\tprivate byId: any[];\n\n\tconstructor(public http: Http) {\n\t\tthis.http = http;\n\t}\n\n\tall(params: {} = {}) {\n\t\tlet query = new URLSearchParams();\n\n\t\tfor (var key in params) {\n\t\t\tconst param: string = params[key];\n\t\t\tquery.set(key, param);\n\t\t}\n\n\t    return this.http.get('/work/paged', {search: query})\n\t        .map((res) => res.json());\n\t}\n\n\tsetList(res) {\n\t    this.list = res;\n\t    return this;\n\t}\n\n\tgetList() {\n\t    return this.list;\n\t}\n\n\tfind(id: number, cached?: boolean) {\n        if (cached && this.byId[id] !== undefined) {\n            return this.byId[id];\n        }\n\n        return this.http.get('/work/' + id)\n            .map(res => res.json());\n\t}\n\n\tcache(work) {\n        this.byId[work.id] = work;\n        return this;\n\t}\n\n\tupdate(id, attributes) {\n\t\tlet url = window.location.protocol + '//' + window.location.hostname + '/work/' + id;\n\n\t\treturn this.http.put(url, attributes)\n\t\t\t.map(res => res.json());\n\t}\n\n\tcreate(attributes) {\n\t\tlet url = window.location.protocol + '//' + window.location.hostname + '/work';\n\n\t\treturn this.http.post(url, attributes)\n\t\t\t.map(res => res.json());\n\t}\n}\n"],"sourceRoot":"/source/"}