{"version":3,"sources":["shared/services/auth.service.ts"],"names":[],"mappings":"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","file":"shared/services/auth.service.js","sourcesContent":["import { Injectable, OnInit } from '@angular/core';\r\nimport { Http } from '@angular/http';\r\nimport { Observable } from 'rxjs/Rx';\r\n// import {LocalStorageService} from \"angular2-localstorage/LocalStorageEmitter\";\r\n// import {LocalStorage, SessionStorage} from \"angular2-localstorage/WebStorage\";\r\n\r\n@Injectable()\r\nexport class AuthService implements OnInit {\r\n    authorized = false;\r\n    hasStorage = !(localStorage === undefined);\r\n   // @LocalStorage() public token: string = '';\r\n    private token = '';\r\n\r\n    constructor(private http: Http) {\r\n        this.ngOnInit();\r\n    }\r\n\r\n    ngOnInit() {\r\n        console.log('authService#init', this);\r\n\r\n        if (this.hasStorage) {\r\n            var token = localStorage.getItem('jpa_token');\r\n            if (token) {\r\n                this.setToken(token);\r\n            }\r\n        } else {\r\n            console.warn('local storage is not supported.');\r\n        }\r\n\r\n        // @todo: check token.\r\n        if (this.token != '') {\r\n            this.authorized = true;\r\n        }\r\n    }\r\n\r\n    setToken(token) {\r\n        if (this.hasStorage) localStorage.setItem('jpa_token', token);\r\n        this.token = token;\r\n    }\r\n\r\n    login(email: string, password: string) : Observable<any> {\r\n        console.log('authService#login: ', email, password);\r\n        return Observable.create(observer => {\r\n            this.http.post('authenticate', { email: email, password: password })\r\n                .map(res => res.json())\r\n                .subscribe(\r\n                    res => {\r\n                        this.setToken(res.token);\r\n                        this.authorized = true;\r\n                        observer.next(res);\r\n                    },\r\n                    error => observer.error(this.parseError(error))\r\n                );\r\n        });\r\n    }\r\n\r\n    logout() {\r\n        this.authorized = false;\r\n        this.token = '';\r\n        if (this.hasStorage) localStorage.removeItem('jpa_token');\r\n    }\r\n\r\n    parseError(error) : {title: string, message: string} {\r\n        let title = 'Error';\r\n        let message = \"Something went wrong and I'm not sure what.  Try again later.\";\r\n\r\n        if (error.status === 500) {\r\n            title = 'Server Error';\r\n            message = 'An error occured on the server.  Come back later and try again.';\r\n        } else {\r\n            try {\r\n                let json = JSON.parse(error._body);\r\n                message = json.errorText || json.error;\r\n\r\n                if (json.error === 'invalid_credentials') title = 'Login failed';\r\n            } catch (e) {\r\n                console.log('couldnt parse the json: ', e);\r\n            }\r\n        }\r\n\r\n        return { title: title, message: message };\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}