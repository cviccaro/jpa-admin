{"version":3,"sources":["shared/services/auth.service.ts"],"names":[],"mappings":"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","file":"shared/services/auth.service.js","sourcesContent":["import { Injectable, OnInit } from '@angular/core';\nimport { Http, URLSearchParams, Headers } from '@angular/http';\nimport { Observable } from 'rxjs/Rx';\nimport { AuthHttp, JwtHelper } from 'angular2-jwt';\n// import {LocalStorageService} from \"angular2-localstorage/LocalStorageEmitter\";\n// import {LocalStorage, SessionStorage} from \"angular2-localstorage/WebStorage\";\n\n@Injectable()\nexport class AuthService implements OnInit {\n    authorized = false;\n    hasStorage = !(localStorage === undefined);\n   // @LocalStorage() public token: string = '';\n    private token = '';\n    private expires: number;\n\n    constructor(private http: Http, private authHttp: AuthHttp, private helper: JwtHelper) {\n        this.ngOnInit();\n    }\n\n    ngOnInit() {\n        if (this.hasStorage) {\n            ['token', 'expires'].forEach(key => {\n                let val = localStorage.getItem(`id_${key}`);\n                if (val) this[key] = val;\n            });\n        } else {\n            console.warn('authService#local storage is not supported.');\n        }\n\n        // @todo: check token.\n        if (this.token != '') {\n            console.log('authService#Found authorization token in localStorage.  Checking expiration date...');\n            if (this.expires !== undefined && this.timeLeft(this.expires) > 0) {\n                this.authorized = true;\n                console.log('authService#PASS: Authorization token is still valid for ' + this.timeLeft(this.expires) + ' seconds.');\n            } else {\n                console.log('authService#FAIL: Authorization token expired on ',this.expires);\n                this.refresh()\n                    .subscribe(res => {\n                        console.log('refresh response to subscription receiver', res);\n                    });\n            }\n        } else {\n            console.log('authService#no token found in storage.');\n        }\n\n        console.log('authService#init END', this);\n    }\n\n    timeLeft(expires) {\n        return expires - (new Date().getTime() / 1000);\n    }\n\n    setToken(token) {\n        if (this.hasStorage) localStorage.setItem('id_token', token);\n        this.token = token;\n        return this;\n    }\n\n    getToken() {\n        return this.token;\n    }\n\n    setExpires(expires) {\n        if (this.hasStorage) localStorage.setItem('id_expires', expires);\n        this.expires = expires;\n        return this;\n    }\n\n    login(email: string, password: string) : Observable<any> {\n        console.log('authService#login: ', email, password);\n        return Observable.create(observer => {\n            this.http.post('authenticate', { email: email, password: password })\n                .map(res => res.json())\n                .subscribe(\n                    res => {\n                        this.setToken(res.token);\n                        this.setExpires(res.expires);\n                        this.authorized = true;\n                        observer.next(res);\n                    },\n                    error => observer.error(this.parseError(error))\n                );\n        });\n    }\n\n    refresh() {\n        console.log('authService#refresh');\n        return Observable.create(observer => {\n            let headers = new Headers({'Authorization': 'Bearer ' + this.token});\n            this.http.get('authenticate/refresh', {headers: headers})\n                .map(res => res.json())\n                .subscribe(\n                    res => {\n                        console.log('authService#refresh Success', res);\n                        this.setToken(res.token);\n                        this.setExpires(res.expires);\n                        this.authorized = true;\n                        observer.next(res);\n                    },\n                    error => {\n                        console.log('error in jwt refresh ', error);\n                        observer.error(error);\n                        //observer.error(this.parseError(error)\n                    }\n                );\n        });\n\n    }\n\n    reset() {\n        this.authorized = false;\n\n        // this.token = '';\n        // if (this.hasStorage) localStorage.removeItem('id_token');\n\n        // this.expires = undefined;\n        // if (this.hasStorage) localStorage.removeItem('id_expires');\n    }\n\n    parseError(error) : {title: string, message: string} {\n        let title = 'Error';\n        let message = \"Something went wrong and I'm not sure what.  Try again later.\";\n\n        if (error.status === 500) {\n            title = 'Server Error';\n            message = 'An error occured on the server.  Come back later and try again.';\n        } else {\n            try {\n                let json = JSON.parse(error._body);\n                message = json.errorText || json.error;\n\n                if (json.error === 'invalid_credentials') title = 'Login failed';\n            } catch (e) {\n                console.log('authService#parseError couldnt parse the json: ', {\n                    error: error,\n                    reason: e\n                });\n            }\n        }\n\n        return { title: title, message: message };\n    }\n}\n"],"sourceRoot":"/source/"}