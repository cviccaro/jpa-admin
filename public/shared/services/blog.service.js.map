{"version":3,"sources":["shared/services/blog.service.ts"],"names":[],"mappings":"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","file":"shared/services/blog.service.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Http, URLSearchParams } from '@angular/http';\nimport 'rxjs/add/operator/map';\n\n@Injectable()\nexport class BlogService {\n    private list: any;\n    private byId: any[];\n\n\tconstructor(public http: Http) {\n\t\tthis.http = http;\n\t}\n\n\tall(params: {} = {}) {\n\t\tlet query = new URLSearchParams();\n\t\tfor (var key in params) {\n\t\t\tconst param: string = params[key];\n\t\t\tquery.set(key, param);\n\t\t}\n\n\t    return this.http.get('/blogs/paged', {search: query})\n\t        .map(res => res.json());\n\t}\n\n    setList(res) {\n        this.list = res;\n        return this;\n    }\n\n    getList() {\n        return this.list;\n    }\n\n\tfind(id: number, cached?: boolean) {\n        if (cached && this.byId[id] !== undefined) {\n            return this.byId[id];\n        }\n\n        return this.http.get('/blogs/' + id)\n            .map(res => res.json());\n\t}\n\n\tcache(blog) {\n        this.byId[blog.id] = blog;\n        return this;\n\t}\n\n    create(attributes) {\n        let url = window.location.protocol + '//' + window.location.hostname + '/blogs';\n\n        let form = new FormData();\n        let _form = {};\n        Object.keys(attributes).forEach(key => {\n            let val = attributes[key];\n            switch(key) {\n                case 'images':\n                    // val.forEach((item,i) => {\n                    //     Object.keys(item).forEach(k => {\n                    //         let v = item[k];\n                    //         form.append(`${key}[${i}][${k}]`, v);\n                    //         _form[`${key}[${i}][${k}]`] = v;\n                    //     });\n                    // });\n                    break;\n                case 'image':\n                    form.append(key, val);\n                    _form[key] = val;\n                    break;\n                default:\n                    if (val !== undefined && val !== null) {\n                        console.log('appending to form ', { key: key, val: val });\n                        form.append(key, val);\n                        _form[key] = val;\n                    } else {\n                        console.log('skipping appending ' + key + ' to form because its undefined/null: ', val);\n                    }\n            }\n        });\n\n        console.log(\"Created a form to upload to blog create\", _form);\n\n        return this.http.post(url, form)\n            .map(res => res.json());\n    }\n\n    update(id, attributes) {\n        let url = window.location.protocol + '//' + window.location.hostname + '/blogs/update/' + id;\n\n        let form = new FormData();\n        let _form = {};\n        Object.keys(attributes).forEach(key => {\n            let val = attributes[key];\n            switch(key) {\n                case 'images':\n                    break;\n                case 'divisions':\n                case 'tags':\n                    val.forEach((item,i) => {\n                        Object.keys(item).forEach(k => {\n                            let v = item[k];\n                            form.append(`${key}[${i}][${k}]`, v);\n                            _form[`${key}[${i}][${k}]`] = v;\n                        });\n                    });\n                    break;\n                case 'image':\n                    form.append(key, val);\n                    _form[key] = val;\n                    break;\n                default:\n                    if (val !== undefined && val !== null) {\n                        console.log('appending to form ', { key: key, val: val });\n                        form.append(key, val);\n                        _form[key] = val;\n                    } else {\n                        console.log('skipping appending ' + key + ' to form because its undefined/null: ', val);\n                    }\n            }\n        });\n\n        console.debug('BlogService is sending POST request to ' + url + ' with form ', _form);\n        return this.http.post(url, form)\n            .map(res => res.json());\n    }\n}\n"],"sourceRoot":"/source/"}